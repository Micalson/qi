#cmake_minimum_required ( VERSION 2.6)
#
#if (NOT BUILD_TYPE)
#  set(BUILD_TYPE "Release" CACHE STRING "Build type of the OCCT" FORCE)
#  SET_PROPERTY(CACHE BUILD_TYPE PROPERTY STRINGS Release Debug)
#endif()
#
#set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/../../cmake/")
#include(ConfigureTarget)
#
#set(CMAKE_CONFIGURATION_TYPES ${BUILD_TYPE} CACHE INTERNAL "" FORCE)
#
#project(OCCT)

set_property(GLOBAL PROPERTY 3RDPARTY_USE_FOLDERS ON)

set(BUILD_SHARED_LIBS ON)

IF("${BUILD_TYPE}" STREQUAL "${CMAKE_BUILD_TYPE}" AND "${BUILD_BITNESS}" STREQUAL "${BUILD_BITNESS1}")
  SET(CHANGES_ARE_NEEDED OFF)
ELSE()
  SET(CHANGES_ARE_NEEDED ON)
ENDIF()

set(BUILD_BITNESS 32 CACHE STRING "Bitness of the OCCT project")
SET_PROPERTY(CACHE BUILD_BITNESS PROPERTY STRINGS 32 64)

SET(BUILD_BITNESS1 ${BUILD_BITNESS} CACHE INTERNAL "Temporary bitness is created to check whether change 3rdparty paths or not" FORCE)

SET( CMAKE_BUILD_TYPE ${BUILD_TYPE} CACHE INTERNAL "Build type of the OCCT" FORCE )

SET( INSTALL_DIR "" CACHE PATH "Directory contains install files of the OCCT" )
SET( CMAKE_INSTALL_PREFIX "${INSTALL_DIR}" CACHE INTERNAL "" FORCE )

set (BUILD_TOOLKITS "" CACHE STRING "Toolkits are included in OCCT")
separate_arguments(BUILD_TOOLKITS)

SET(BUILD_FoundationClasses ON CACHE BOOL "include FoundationClasses"  )
SET(BUILD_ModelingData ON CACHE BOOL "include ModelingData"  )
SET(BUILD_ModelingAlgorithms ON CACHE BOOL "include ModelingAlgorithms"  )
SET(BUILD_Visualization ON CACHE BOOL "include Visualization"  )
SET(BUILD_ApplicationFramework ON CACHE BOOL "include ApplicationFramework"  )
SET(BUILD_DataExchange ON CACHE BOOL "include DataExchange"  )
SET(BUILD_Draw ON CACHE BOOL "include Draw"  )

if (WIN32)
  set(SCRIPT_EXT bat)
else()
  set(SCRIPT_EXT sh)
endif()

if (DEFINED MSVC70)
  SET(COMPILER vc7)
elseif (DEFINED MSVC80)
  SET(COMPILER vc8)
elseif (DEFINED MSVC90)
  SET(COMPILER vc9)
elseif (DEFINED MSVC10)
  SET(COMPILER vc10)
elseif (DEFINED MSVC11)
  SET(COMPILER vc11)
else()
  SET(COMPILER ${CMAKE_GENERATOR})
endif()

if (${BUILD_BITNESS} STREQUAL 64)
  add_definitions(-D_OCC64)
endif()

add_definitions(-DCSFDB)
if(WIN32)
  add_definitions(/DWNT -wd4996)
elseif(APPLE)
  option(3RDPARTY_USE_GLX "Use X11 OpenGL on OSX?" OFF)
  add_definitions(-fexceptions -fPIC -DOCC_CONVERT_SIGNALS -DHAVE_WOK_CONFIG_H -DHAVE_CONFIG_H)
  if(3RDPARTY_USE_GLX)
    add_definitions(-DMACOSX_USE_GLX)
  endif()
else()
  add_definitions(-fexceptions -fPIC -DOCC_CONVERT_SIGNALS -DHAVE_WOK_CONFIG_H -DHAVE_CONFIG_H -DLIN)
endif()

string(REGEX MATCH "EHsc" ISFLAG "${CMAKE_CXX_FLAGS}")
IF(ISFLAG)
  STRING(REGEX REPLACE "EHsc" "EHa" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
ELSEIF(WIN32)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -EHa")
ENDIF()

IF(WIN32)
  IF(NOT DEFINED MSVC70 AND NOT DEFINED MSVC80)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -MP")
  ENDIF()
ENDIF()

SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DNo_Exception")
SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -DNo_Exception")

SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEB")
SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DDEB")

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/out/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/out/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/out/bin)

# RESOURCES
install(DIRECTORY "../../src/DrawResources" DESTINATION  "${INSTALL_DIR}/res" )
install(DIRECTORY "../../src/StdResource" DESTINATION  "${INSTALL_DIR}/res" )
install(DIRECTORY "../../src/SHMessage" DESTINATION  "${INSTALL_DIR}/res" )
install(DIRECTORY "../../src/Textures" DESTINATION  "${INSTALL_DIR}/res" )
install(DIRECTORY "../../src/XSMessage" DESTINATION  "${INSTALL_DIR}/res" )
install(DIRECTORY "../../src/TObj" DESTINATION  "${INSTALL_DIR}/res" )
install(DIRECTORY "../../src/XSTEPResource" DESTINATION  "${INSTALL_DIR}/res" )
install(DIRECTORY "../../src/XmlOcafResource" DESTINATION  "${INSTALL_DIR}/res" )

install(FILES "../../src/UnitsAPI/Lexi_Expr.dat" DESTINATION  "${INSTALL_DIR}/res/UnitsAPI" )
install(FILES "../../src/UnitsAPI/Units.dat"     DESTINATION  "${INSTALL_DIR}/res/UnitsAPI" )

IF("${BUILD_TYPE}" STREQUAL "Release") 
  SET(BUILD_SUFFIX "")
ELSE()
  SET(BUILD_SUFFIX "") # debug == release
ENDIF()

FUNCTION(SUBDIRECTORY_NAMES MAIN_DIRECTORY RESULT)
  file(GLOB SUB_ITEMS "${MAIN_DIRECTORY}/*")
  
  foreach(ITEM ${SUB_ITEMS})
    if(IS_DIRECTORY "${ITEM}")
      GET_FILENAME_COMPONENT(ITEM_NAME "${ITEM}" NAME)
      LIST(APPEND LOCAL_RESULT "${ITEM_NAME}")
    endif()
  endforeach()
  set (${RESULT} ${LOCAL_RESULT} PARENT_SCOPE)
ENDFUNCTION()

FUNCTION(FIND_PRODUCT_DIR ROOT_DIR PRODUCT_NAME RESULT)
  string( TOLOWER "${PRODUCT_NAME}" lower_PRODUCT_NAME )
  
  LIST(APPEND SEARCH_TEMPLATES "${lower_PRODUCT_NAME}.*${COMPILER}.*${BUILD_BITNESS}")
  LIST(APPEND SEARCH_TEMPLATES "${lower_PRODUCT_NAME}.*[0-9.]+.*${COMPILER}.*${BUILD_BITNESS}")
  LIST(APPEND SEARCH_TEMPLATES "${lower_PRODUCT_NAME}.*[0-9.]+.*${BUILD_BITNESS}")
  LIST(APPEND SEARCH_TEMPLATES "${lower_PRODUCT_NAME}.*[0-9.]+")
  LIST(APPEND SEARCH_TEMPLATES "${lower_PRODUCT_NAME}")
  
  SUBDIRECTORY_NAMES( "${ROOT_DIR}" SUBDIR_NAME_LIST)
  
  FOREACH( SEARCH_TEMPLATE ${SEARCH_TEMPLATES})
    IF(LOCAL_RESULT)
      BREAK()
    ENDIF()
    
    FOREACH(SUBDIR_NAME ${SUBDIR_NAME_LIST})
      string( TOLOWER "${SUBDIR_NAME}" lower_SUBDIR_NAME )
      
      STRING(REGEX MATCH "${SEARCH_TEMPLATE}" DUMMY_VAR "${lower_SUBDIR_NAME}")
      IF(DUMMY_VAR)
        LIST(APPEND LOCAL_RESULT ${SUBDIR_NAME})
      ENDIF()
    ENDFOREACH()
  ENDFOREACH()
  
  IF(LOCAL_RESULT)
    LIST(LENGTH "${LOCAL_RESULT}" LOC_LEN)
    MATH(EXPR LAST_ELEMENT_INDEX "${LOC_LEN}-1")
    LIST(GET LOCAL_RESULT ${LAST_ELEMENT_INDEX} DUMMY)
    SET(${RESULT} ${DUMMY} PARENT_SCOPE)
  ENDIF()  
ENDFUNCTION()

IF(WIN32)
  SET(DLL_SO "dll")
  SET(DLL_SO_FOLDER "bin")
  SET(DLL_SO_PREFIX "")
ELSEIF(APPLE)
  SET(DLL_SO "dylib")
  SET(DLL_SO_FOLDER "lib")
  SET(DLL_SO_PREFIX "lib")
ELSE()
  SET(DLL_SO "so")
  SET(DLL_SO_FOLDER "lib")
  SET(DLL_SO_PREFIX "lib")
ENDIF()

SET(3RDPARTY_DIR "" CACHE PATH "Directory contains required 3rdparty products")
SET(3RDPARTY_INCLUDE_DIRS "")
SET(3RDPARTY_NOT_INCLUDED)

IF (3RDPARTY_USE_GLX)
  SET(3RDPARTY_LIBRARY_DIRS "${3RDPARTY_LIBRARY_DIRS};/usr/X11/lib")
  SET(3RDPARTY_INCLUDE_DIRS "${3RDPARTY_INCLUDE_DIRS};/usr/X11/include")
ENDIF()

SET(3RDPARTY_USE_GL2PS OFF CACHE BOOL "whether use or not gl2ps product")
SET(3RDPARTY_USE_FREEIMAGE OFF CACHE BOOL "whether use or not freeimage product")
SET(3RDPARTY_USE_TBB OFF CACHE BOOL "whether use or not tbb product")

MACRO(THIRDPARTY_PRODUCT PRODUCT_NAME HEADER_NAME LIBRARY_NAME)
  IF(NOT DEFINED 3RDPARTY_${PRODUCT_NAME}_DIR)
    SET(3RDPARTY_${PRODUCT_NAME}_DIR "" CACHE PATH "Directory contains ${PRODUCT_NAME} product")
  ENDIF()
  
  IF(3RDPARTY_DIR AND ("${3RDPARTY_${PRODUCT_NAME}_DIR}" STREQUAL "" OR CHANGES_ARE_NEEDED))
    FIND_PRODUCT_DIR("${3RDPARTY_DIR}" ${PRODUCT_NAME} ${PRODUCT_NAME}_DIR_NAME)
    IF("${${PRODUCT_NAME}_DIR_NAME}" STREQUAL "")
      MESSAGE(STATUS "${PRODUCT_NAME} DON'T FIND")
    ELSE()
      SET(3RDPARTY_${PRODUCT_NAME}_DIR "${3RDPARTY_DIR}/${${PRODUCT_NAME}_DIR_NAME}" CACHE PATH "Directory contains ${PRODUCT_NAME} product" FORCE)
    ENDIF()
  ENDIF()
  
  SET(INSTALL_${PRODUCT_NAME} OFF CACHE BOOL "Is ${PRODUCT_NAME} lib copy to install directory")

  IF(3RDPARTY_${PRODUCT_NAME}_DIR)
    IF("${3RDPARTY_${PRODUCT_NAME}_INCLUDE_DIR}" STREQUAL "" OR CHANGES_ARE_NEEDED OR "${3RDPARTY_${PRODUCT_NAME}_INCLUDE_DIR}" STREQUAL "3RDPARTY_${PRODUCT_NAME}_INCLUDE_DIR-NOTFOUND")
      SET(3RDPARTY_${PRODUCT_NAME}_INCLUDE_DIR "3RDPARTY_${PRODUCT_NAME}_INCLUDE_DIR-NOTFOUND" CACHE FILEPATH "Directory contains headers of the ${PRODUCT_NAME} product" FORCE)
      FIND_PATH(3RDPARTY_${PRODUCT_NAME}_INCLUDE_DIR ${HEADER_NAME} PATHS "${3RDPARTY_${PRODUCT_NAME}_DIR}/include" NO_DEFAULT_PATH)
      
      IF("${3RDPARTY_${PRODUCT_NAME}_INCLUDE_DIR}" STREQUAL "3RDPARTY_${PRODUCT_NAME}_INCLUDE_DIR-NOTFOUND")
        FIND_PATH(3RDPARTY_${PRODUCT_NAME}_INCLUDE_DIR ${HEADER_NAME})
      ENDIF()
      
    ENDIF()
    
    IF("${3RDPARTY_${PRODUCT_NAME}_LIBRARY}" STREQUAL "" OR CHANGES_ARE_NEEDED OR "${3RDPARTY_${PRODUCT_NAME}_LIBRARY}" STREQUAL "3RDPARTY_${PRODUCT_NAME}_LIBRARY-NOTFOUND")
      SET(3RDPARTY_${PRODUCT_NAME}_LIBRARY "3RDPARTY_${PRODUCT_NAME}_LIBRARY-NOTFOUND" CACHE FILEPATH "Directory contains library of the ${PRODUCT_NAME} product" FORCE)
      FIND_LIBRARY(3RDPARTY_${PRODUCT_NAME}_LIBRARY ${LIBRARY_NAME}  PATHS "${3RDPARTY_${PRODUCT_NAME}_DIR}/lib" NO_DEFAULT_PATH)
      
      # check default path for library search
      IF("${3RDPARTY_${PRODUCT_NAME}_LIBRARY}" STREQUAL "3RDPARTY_${PRODUCT_NAME}_LIBRARY-NOTFOUND")
        FIND_LIBRARY(3RDPARTY_${PRODUCT_NAME}_LIBRARY ${LIBRARY_NAME})
      ENDIF()
    ENDIF()
    
    IF("${3RDPARTY_${PRODUCT_NAME}_DLL}" STREQUAL "" OR CHANGES_ARE_NEEDED OR "${3RDPARTY_${PRODUCT_NAME}_DLL}" STREQUAL "3RDPARTY_${PRODUCT_NAME}_DLL-NOTFOUND")
      SET(3RDPARTY_${PRODUCT_NAME}_DLL "3RDPARTY_${PRODUCT_NAME}_DLL-NOTFOUND" CACHE FILEPATH "Directory contains shared library of the ${PRODUCT_NAME} product" FORCE)
      FIND_FILE(3RDPARTY_${PRODUCT_NAME}_DLL "${DLL_SO_PREFIX}${LIBRARY_NAME}.${DLL_SO}"  PATHS "${3RDPARTY_${PRODUCT_NAME}_DIR}/${DLL_SO_FOLDER}" NO_DEFAULT_PATH)
      
      IF("${3RDPARTY_${PRODUCT_NAME}_DLL}" STREQUAL "3RDPARTY_${PRODUCT_NAME}_DLL-NOTFOUND")
        FIND_FILE(3RDPARTY_${PRODUCT_NAME}_DLL "${DLL_SO_PREFIX}${LIBRARY_NAME}.${DLL_SO}")
      ENDIF()
    ENDIF()
    MARK_AS_ADVANCED(3RDPARTY_${PRODUCT_NAME}_DIR)
  ENDIF()

  IF(3RDPARTY_${PRODUCT_NAME}_INCLUDE_DIR)
    SET(3RDPARTY_INCLUDE_DIRS "${3RDPARTY_INCLUDE_DIRS};${3RDPARTY_${PRODUCT_NAME}_INCLUDE_DIR}")
  ELSE()
    LIST(APPEND 3RDPARTY_NOT_INCLUDED 3RDPARTY_${PRODUCT_NAME}_INCLUDE_DIR)
  ENDIF()

  IF(3RDPARTY_${PRODUCT_NAME}_LIBRARY)
    GET_FILENAME_COMPONENT(3RDPARTY_${PRODUCT_NAME}_LIBRARY_DIR "${3RDPARTY_${PRODUCT_NAME}_LIBRARY}" PATH)
    SET(3RDPARTY_LIBRARY_DIRS "${3RDPARTY_LIBRARY_DIRS};${3RDPARTY_${PRODUCT_NAME}_LIBRARY_DIR}")
  ELSE()
    LIST(APPEND 3RDPARTY_NOT_INCLUDED 3RDPARTY_${PRODUCT_NAME}_LIBRARY)
  ENDIF()
  
  IF(3RDPARTY_${PRODUCT_NAME}_DLL)
    #
  ELSE()
    LIST(APPEND 3RDPARTY_NOT_INCLUDED 3RDPARTY_${PRODUCT_NAME}_DLL)
  ENDIF()

  IF(INSTALL_${PRODUCT_NAME})
    INSTALL(FILES "${3RDPARTY_${PRODUCT_NAME}_DLL}" DESTINATION "${INSTALL_DIR}/${DLL_SO_FOLDER}")
    SET(3RDPARTY_${PRODUCT_NAME}_DLL_DIR "")
  ELSE()
    GET_FILENAME_COMPONENT(3RDPARTY_${PRODUCT_NAME}_DLL_DIR "${3RDPARTY_${PRODUCT_NAME}_DLL}" PATH)
  ENDIF()
ENDMACRO()

# TCL

#tcl85 - win; tcl8.5 - lin
IF(WIN32)
  SET(TCL_SEP "")
ELSE()
  SET(TCL_SEP ".")
ENDIF()
  
THIRDPARTY_PRODUCT("TCL" "tcl.h" "tcl8${TCL_SEP}5")

#install tk and libs
IF(INSTALL_TCL)
  GET_FILENAME_COMPONENT(3RDPARTY_TK_LIB_DIR "${3RDPARTY_TCL_LIBRARY}" PATH)
  GET_FILENAME_COMPONENT(3RDPARTY_TK_DLL_DIR "${3RDPARTY_TCL_DLL}" PATH)
  
  INSTALL(FILES "${3RDPARTY_TK_DLL_DIR}/${DLL_SO_PREFIX}tk8${TCL_SEP}5.${DLL_SO}" DESTINATION "${INSTALL_DIR}/${DLL_SO_FOLDER}")
  INSTALL(DIRECTORY "${3RDPARTY_TK_LIB_DIR}/tcl8.5" DESTINATION "${INSTALL_DIR}/lib")
  INSTALL(DIRECTORY "${3RDPARTY_TK_LIB_DIR}/tk8.5" DESTINATION "${INSTALL_DIR}/lib")
ENDIF()

# FREETYPE
THIRDPARTY_PRODUCT("FREETYPE" "ft2build.h" "freetype${BUILD_SUFFIX}")

IF("${3RDPARTY_FREETYPE_INCLUDE_DIR}" STREQUAL "" OR "${3RDPARTY_FREETYPE_INCLUDE_DIR}" STREQUAL "3RDPARTY_${PRODUCT_NAME}_INCLUDE_DIR-NOTFOUND")
  
ELSEIF(EXISTS "${3RDPARTY_FREETYPE_INCLUDE_DIR}/freetype2/")
  SET(3RDPARTY_INCLUDE_DIRS "${3RDPARTY_INCLUDE_DIRS};${3RDPARTY_FREETYPE_INCLUDE_DIR}/freetype2")
ENDIF()

# FREEIMAGE
IF(3RDPARTY_USE_FREEIMAGE)
  ADD_DEFINITIONS(-DHAVE_FREEIMAGE) 

  THIRDPARTY_PRODUCT("FREEIMAGE" "FreeImage.h" "freeimage${BUILD_SUFFIX}")
  IF(WIN32)
    IF("${3RDPARTY_FREEIMAGE_DIR}" STREQUAL "")
    ELSE()
      SET (3RDPARTY_FREEIMAGEPLUS_DIR "${3RDPARTY_FREEIMAGE_DIR}")
    ENDIF()
    
    THIRDPARTY_PRODUCT("FREEIMAGEPLUS" "FreeImagePlus.h" "freeimageplus${BUILD_SUFFIX}")
    
  ENDIF()
ENDIF()


# GL2PS
IF(3RDPARTY_USE_GL2PS)
  ADD_DEFINITIONS(-DHAVE_GL2PS)
  THIRDPARTY_PRODUCT("GL2PS" "gl2ps.h" "gl2ps${BUILD_SUFFIX}")
ENDIF()

# TBB
IF (3RDPARTY_USE_TBB)
  ADD_DEFINITIONS(-DHAVE_TBB)

  IF(${BUILD_BITNESS} STREQUAL 32)
    SET (TBB_ARCH_NAME ia32)
  ELSE()
    SET (TBB_ARCH_NAME intel64)
  ENDIF()
  
  IF(NOT DEFINED 3RDPARTY_TBB_DIR)
    SET(3RDPARTY_TBB_DIR "" CACHE PATH "Directory contains tbb product")
  ENDIF()
  
  SET(3RDPARTY_TBB_DIR_NAME "")
  IF(3RDPARTY_DIR AND ("${3RDPARTY_TBB_DIR}" STREQUAL "" OR CHANGES_ARE_NEEDED))
    FIND_PRODUCT_DIR("${3RDPARTY_DIR}" "TBB" 3RDPARTY_TBB_DIR_NAME)
    IF("${3RDPARTY_TBB_DIR_NAME}" STREQUAL "")
      MESSAGE(STATUS "TBB DON'T FIND")
    ELSE()
      SET(3RDPARTY_TBB_DIR "${3RDPARTY_DIR}/${3RDPARTY_TBB_DIR_NAME}" CACHE PATH "Directory contains tbb product" FORCE)
    ENDIF()
  ENDIF()
  
  SET(INSTALL_TBB OFF CACHE BOOL "Is tbb lib copy to install directory")

  IF(3RDPARTY_TBB_DIR)
    IF("${3RDPARTY_TBB_INCLUDE_DIR}" STREQUAL "" OR CHANGES_ARE_NEEDED)
      SET(3RDPARTY_TBB_INCLUDE_DIR "3RDPARTY_TBB_INCLUDE_DIR-NOTFOUND" CACHE PATH "Directory contains headers of the tbb product" FORCE)
      FIND_PATH(3RDPARTY_TBB_INCLUDE_DIR tbb/tbb.h PATHS "${3RDPARTY_TBB_DIR}/include")
    ENDIF()

    SET(TBB_DEBUG_POSTFIX "")
    if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
      SET(TBB_DEBUG_POSTFIX "") # _debug postfix removed
    ENDIF()
    
    IF("${3RDPARTY_TBB_LIBRARY}" STREQUAL "" OR CHANGES_ARE_NEEDED OR "${3RDPARTY_TBB_LIBRARY}" STREQUAL "3RDPARTY_TBB_LIBRARY-NOTFOUND")
      SET(3RDPARTY_TBB_LIBRARY "3RDPARTY_TBB_LIBRARY-NOTFOUND" CACHE PATH "Directory contains library of the tbb product" FORCE)
      FIND_LIBRARY(3RDPARTY_TBB_LIBRARY tbb${TBB_DEBUG_POSTFIX} PATHS "${3RDPARTY_TBB_DIR}/lib/${TBB_ARCH_NAME}/${COMPILER}" NO_DEFAULT_PATH)
      
      IF("${3RDPARTY_TBB_LIBRARY}" STREQUAL "3RDPARTY_TBB_LIBRARY-NOTFOUND")
        FIND_LIBRARY(3RDPARTY_TBB_LIBRARY tbb${TBB_DEBUG_POSTFIX})
      ENDIF()
    ENDIF()

    IF("${3RDPARTY_TBB_MALLOC_LIBRARY}" STREQUAL "" OR CHANGES_ARE_NEEDED OR "${3RDPARTY_TBB_MALLOC_LIBRARY}" STREQUAL "3RDPARTY_TBB_MALLOC_LIBRARY-NOTFOUND")
      SET(3RDPARTY_TBB_MALLOC_LIBRARY "3RDPARTY_TBB_MALLOC_LIBRARY-NOTFOUND" CACHE PATH "Directory contains library of the tbb malloc product" FORCE)
      FIND_LIBRARY(3RDPARTY_TBB_MALLOC_LIBRARY tbbmalloc${TBB_DEBUG_POSTFIX} PATHS "${3RDPARTY_TBB_DIR}/lib/${TBB_ARCH_NAME}/${COMPILER}" NO_DEFAULT_PATH)
      
      IF("${3RDPARTY_TBB_MALLOC_LIBRARY}" STREQUAL "3RDPARTY_TBB_MALLOC_LIBRARY-NOTFOUND")
        FIND_LIBRARY(3RDPARTY_TBB_MALLOC_LIBRARY tbbmalloc${TBB_DEBUG_POSTFIX})
      ENDIF()
    ENDIF()
    
    
    
    IF("${3RDPARTY_TBB_DLL}" STREQUAL "" OR CHANGES_ARE_NEEDED)
      SET(3RDPARTY_TBB_DLL "3RDPARTY_TBB_DLL-NOTFOUND" CACHE PATH "Directory contains shared library of the tbb product" FORCE)
      FIND_FILE(3RDPARTY_TBB_DLL "${DLL_SO_PREFIX}tbb${TBB_DEBUG_POSTFIX}.${DLL_SO}" PATHS "${3RDPARTY_TBB_DIR}/${DLL_SO_FOLDER}/${TBB_ARCH_NAME}/${COMPILER}" NO_DEFAULT_PATH)
      
      IF("${3RDPARTY_TBB_DLL}" STREQUAL "3RDPARTY_TBB_DLL-NOTFOUND")
        FIND_FILE(3RDPARTY_TBB_DLL "${DLL_SO_PREFIX}tbb${TBB_DEBUG_POSTFIX}.${DLL_SO}")
      ENDIF()
    ENDIF()
    
    IF("${3RDPARTY_TBB_MALLOC_DLL}" STREQUAL "" OR CHANGES_ARE_NEEDED)
      SET(3RDPARTY_TBB_MALLOC_DLL "3RDPARTY_TBB_MALLOC_DLL-NOTFOUND" CACHE PATH "Directory contains shared library of the tbb malloc product" FORCE)
      FIND_FILE(3RDPARTY_TBB_MALLOC_DLL "${DLL_SO_PREFIX}tbbmalloc${TBB_DEBUG_POSTFIX}.${DLL_SO}" PATHS "${3RDPARTY_TBB_DIR}/${DLL_SO_FOLDER}/${TBB_ARCH_NAME}/${COMPILER}" NO_DEFAULT_PATH)
      
      IF("${3RDPARTY_TBB_MALLOC_DLL}" STREQUAL "3RDPARTY_TBB_MALLOC_DLL-NOTFOUND")
        FIND_FILE(3RDPARTY_TBB_MALLOC_DLL "${DLL_SO_PREFIX}tbbmalloc${TBB_DEBUG_POSTFIX}.${DLL_SO}")
      ENDIF()
    ENDIF()

    MARK_AS_ADVANCED(3RDPARTY_TBB_DIR_NAME)
  ELSE()
    LIST(APPEND 3RDPARTY_NOT_INCLUDED 3RDPARTY_TBB_DIR)
  ENDIF()

  IF(3RDPARTY_TBB_INCLUDE_DIR)
    SET(3RDPARTY_INCLUDE_DIRS "${3RDPARTY_INCLUDE_DIRS};${3RDPARTY_TBB_INCLUDE_DIR}")
  ELSE()
    LIST(APPEND 3RDPARTY_NOT_INCLUDED 3RDPARTY_TBB_INCLUDE_DIR)
  ENDIF()

  IF(3RDPARTY_TBB_LIBRARY)
    GET_FILENAME_COMPONENT(3RDPARTY_TBB_LIBRARY_DIR "${3RDPARTY_TBB_LIBRARY}" PATH)
    SET(3RDPARTY_LIBRARY_DIRS "${3RDPARTY_LIBRARY_DIRS};${3RDPARTY_TBB_LIBRARY_DIR}")
  ELSE()
    LIST(APPEND 3RDPARTY_NOT_INCLUDED 3RDPARTY_TBB_LIBRARY)
  ENDIF()
  
  IF(3RDPARTY_TBB_MALLOC_LIBRARY)
    GET_FILENAME_COMPONENT(3RDPARTY_TBB_LIBRARY_DIR "${3RDPARTY_TBB_MALLOC_LIBRARY}" PATH)
    SET(3RDPARTY_LIBRARY_DIRS "${3RDPARTY_LIBRARY_DIRS};${3RDPARTY_TBB_LIBRARY_DIR}")
  ELSE()
    LIST(APPEND 3RDPARTY_NOT_INCLUDED 3RDPARTY_TBB_MALLOC_LIBRARY)
  ENDIF()
  
  IF(3RDPARTY_TBB_DLL)
    #
  ELSE()
    LIST(APPEND 3RDPARTY_NOT_INCLUDED 3RDPARTY_TBB_DLL)
  ENDIF()
  
  IF(3RDPARTY_TBB_MALLOC_DLL)
    #
  ELSE()
    LIST(APPEND 3RDPARTY_NOT_INCLUDED 3RDPARTY_TBB_MALLOC_DLL)
  ENDIF()

  IF(INSTALL_TBB)
    INSTALL(FILES "${3RDPARTY_TBB_DLL}" "${3RDPARTY_TBB_MALLOC_DLL}" DESTINATION "${INSTALL_DIR}/${DLL_SO_FOLDER}")

    SET(3RDPARTY_TBB_DLL_DIR "")
    SET(3RDPARTY_TBB_MALLOC_DLL_DIR "")
  ELSE()
    GET_FILENAME_COMPONENT(3RDPARTY_TBB_DLL_DIR "${3RDPARTY_TBB_DLL}" PATH)
    GET_FILENAME_COMPONENT(3RDPARTY_TBB_MALLOC_DLL_DIR "${3RDPARTY_TBB_MALLOC_DLL}" PATH)
  ENDIF()
ENDIF()

string( REGEX REPLACE ";" " " 3RDPARTY_NOT_INCLUDED "${3RDPARTY_NOT_INCLUDED}")

#CHECK ALL 3RDPARTY PATHS
IF(3RDPARTY_NOT_INCLUDED)
  #MESSAGE(FATAL_ERROR "NOT FOUND: ${3RDPARTY_NOT_INCLUDED}" )
ENDIF()

list(REMOVE_DUPLICATES 3RDPARTY_INCLUDE_DIRS)
string( REGEX REPLACE ";" "\n\t" 3RDPARTY_INCLUDE_DIRS_WITH_ENDS "${3RDPARTY_INCLUDE_DIRS}")
MESSAGE(STATUS "3RDPARTY_INCLUDE_DIRS: ${3RDPARTY_INCLUDE_DIRS_WITH_ENDS}")
include_directories( ${3RDPARTY_INCLUDE_DIRS} )

list(REMOVE_DUPLICATES 3RDPARTY_LIBRARY_DIRS)
string( REGEX REPLACE ";" "\n\t" 3RDPARTY_LIBRARY_DIRS_WITH_ENDS "${3RDPARTY_LIBRARY_DIRS}")
MESSAGE(STATUS "3RDPARTY_LIBRARY_DIRS: ${3RDPARTY_LIBRARY_DIRS_WITH_ENDS}")
link_directories( ${3RDPARTY_LIBRARY_DIRS} )

#
SET(RUN_PROJECT "")
SET(CASROOT_DEFINITION "")
SET(BIN_DIR_POSTFIX "bin")
SET(RESOURCE_DIR_PREFIX "%SCRIPTROOT%\\res")

IF("${INSTALL_DIR}" STREQUAL "")
  # MESSAGE(FATAL_ERROR "INSTALL_DIR is empty")
ELSE()
  # INC DIRECTORY
  install(DIRECTORY ../../inc DESTINATION  "${INSTALL_DIR}" )

  # DRAW.BAT or DRAW.SH
  install(FILES draw.${SCRIPT_EXT} DESTINATION  "${INSTALL_DIR}" PERMISSIONS  OWNER_READ OWNER_WRITE OWNER_EXECUTE 
                                                                              GROUP_READ GROUP_WRITE GROUP_EXECUTE 
                                                                              WORLD_READ WORLD_WRITE WORLD_EXECUTE)

  configure_file(env.${SCRIPT_EXT}.in env.${SCRIPT_EXT} @ONLY)
  install(FILES "${OCCT_BINARY_DIR}/env.${SCRIPT_EXT}" DESTINATION  "${INSTALL_DIR}" )
ENDIF()

IF(MSVC AND "${BUILD_TYPE}" STREQUAL "Debug")
  SET(RUN_PROJECT "start OCCT.sln")
  SET(BIN_DIR_POSTFIX "out\\bin\\Debug")
  SET(RESOURCE_DIR_PREFIX "%CASROOT%\\src")
  SET(CASROOT_DEFINITION "set \"CASROOT=../..\"")
  
  configure_file(env.bat.in OCCT.bat @ONLY)
ENDIF()
  
set(TKernel_DEPS "")
set(TKMath_DEPS "TKernel")
set(TKAdvTools_DEPS "TKernel")
set(TKG2d_DEPS "TKernel;TKMath")
set(TKG3d_DEPS "TKMath;TKernel;TKG2d")
set(TKGeomBase_DEPS "TKernel;TKMath;TKG2d;TKG3d")
set(TKBRep_DEPS "TKMath;TKernel;TKG2d;TKG3d;TKGeomBase")
set(TKGeomAlgo_DEPS "TKernel;TKMath;TKG3d;TKG2d;TKGeomBase;TKBRep")
set(TKTopAlgo_DEPS "TKMath;TKernel;TKG2d;TKG3d;TKGeomBase;TKBRep;TKGeomAlgo")
set(TKPrim_DEPS "TKBRep;TKernel;TKMath;TKG2d;TKGeomBase;TKG3d;TKTopAlgo")
set(TKBO_DEPS "TKBRep;TKTopAlgo;TKMath;TKernel;TKG2d;TKG3d;TKGeomAlgo;TKGeomBase")
set(TKBool_DEPS "TKBRep;TKTopAlgo;TKMath;TKernel;TKPrim;TKG2d;TKG3d;TKShHealing;TKGeomBase;TKGeomAlgo;TKBO")
set(TKHLR_DEPS "TKBRep;TKernel;TKMath;TKGeomBase;TKG2d;TKG3d;TKGeomAlgo;TKTopAlgo")
set(TKFillet_DEPS "TKBRep;TKernel;TKMath;TKGeomBase;TKGeomAlgo;TKG2d;TKTopAlgo;TKG3d;TKBool;TKShHealing")
set(TKOffset_DEPS "TKFillet;TKBRep;TKTopAlgo;TKMath;TKernel;TKGeomBase;TKG2d;TKG3d;TKGeomAlgo;TKShHealing;TKBO;TKPrim;TKBool")
set(TKFeat_DEPS "TKBRep;TKTopAlgo;TKGeomAlgo;TKMath;TKernel;TKGeomBase;TKPrim;TKG2d;TKBO;TKG3d;TKBool")
set(TKMesh_DEPS "TKBRep;TKMath;TKernel;TKG2d;TKG3d;TKGeomBase;TKTopAlgo;TKGeomAlgo")
set(TKXMesh_DEPS "TKBRep;TKMath;TKernel;TKG2d;TKMesh")
set(TKShHealing_DEPS "TKBRep;TKernel;TKMath;TKG2d;TKTopAlgo;TKG3d;TKGeomBase;TKGeomAlgo")
set(TKService_DEPS "TKernel;TKMath")
set(TKV3d_DEPS "TKBRep;TKMath;TKernel;TKService;TKTopAlgo;TKG2d;TKG3d;TKGeomBase;TKMesh;TKGeomAlgo;TKHLR")
set(TKOpenGl_DEPS "TKernel;TKService;TKV3d")
set(TKMeshVS_DEPS "TKV3d;TKMath;TKService;TKernel;TKG3d;TKG2d")
set(TKNIS_DEPS "TKBRep;TKV3d;TKMath;TKernel;TKService;TKG2d;TKG3d;TKMesh")
set(TKVoxel_DEPS "TKBRep;TKernel;TKV3d;TKMath;TKService;TKGeomBase;TKG2d;TKTopAlgo;TKG3d;TKMesh")
set(PTKernel_DEPS "TKernel")
set(TKPShape_DEPS "TKMath;TKernel;TKG2d;TKG3d;PTKernel;TKBRep")
set(TKCDF_DEPS "TKernel")
set(TKLCAF_DEPS "TKCDF;TKernel")
set(TKCAF_DEPS "TKernel;TKGeomBase;TKBRep;TKTopAlgo;TKMath;TKService;TKG2d;TKG3d;TKCDF;TKLCAF;TKV3d;TKBO")
set(TKBinL_DEPS "TKCDF;TKernel;TKLCAF")
set(TKXmlL_DEPS "TKCDF;TKernel;TKMath;TKLCAF")
set(TKShapeSchema_DEPS "TKernel;TKG2d;PTKernel;TKMath;TKCDF;TKPShape")
set(TKPLCAF_DEPS "TKCDF;PTKernel;TKernel;TKLCAF")
set(TKBin_DEPS "TKBRep;TKMath;TKernel;TKG2d;TKG3d;TKCAF;TKCDF;TKLCAF;TKV3d;TKBinL")
set(TKXml_DEPS "TKCDF;TKernel;TKV3d;TKMath;TKBRep;TKG2d;TKGeomBase;TKG3d;TKLCAF;TKCAF;TKXmlL")
set(TKPCAF_DEPS "PTKernel;TKBRep;TKMath;TKernel;TKCDF;TKG2d;TKV3d;TKService;TKG3d;TKPShape;TKCAF;TKLCAF;TKPLCAF")
set(FWOSPlugin_DEPS "TKernel;TKCDF")
set(TKStdLSchema_DEPS "TKCDF;PTKernel;TKernel;TKShapeSchema;TKLCAF;TKPLCAF")
set(TKStdSchema_DEPS "TKCDF;PTKernel;TKPLCAF;TKernel;TKCAF;TKShapeSchema;TKLCAF;TKStdLSchema;TKG3d;TKPShape;TKMath;TKG2d;TKPCAF")
set(TKTObj_DEPS "TKCDF;TKernel;TKMath;TKLCAF")
set(TKBinTObj_DEPS "TKCDF;TKernel;TKTObj;TKMath;TKLCAF;TKBinL")
set(TKXmlTObj_DEPS "TKCDF;TKernel;TKTObj;TKMath;TKLCAF;TKXmlL")
set(TKXSBase_DEPS "TKBRep;TKernel;TKMath;TKG2d;TKG3d;TKTopAlgo;TKGeomBase;TKShHealing")
set(TKSTEPBase_DEPS "TKernel;TKXSBase;TKMath")
set(TKSTEPAttr_DEPS "TKernel;TKXSBase;TKSTEPBase")
set(TKSTEP209_DEPS "TKernel;TKXSBase;TKSTEPBase")
set(TKSTEP_DEPS "TKernel;TKSTEPAttr;TKSTEP209;TKSTEPBase;TKBRep;TKMath;TKG2d;TKShHealing;TKTopAlgo;TKG3d;TKGeomBase;TKGeomAlgo;TKXSBase")
set(TKIGES_DEPS "TKBRep;TKernel;TKMath;TKTopAlgo;TKShHealing;TKG2d;TKG3d;TKGeomBase;TKGeomAlgo;TKPrim;TKBool;TKOffset;TKXSBase")
set(TKXCAF_DEPS "TKBRep;TKernel;TKMath;TKService;TKG2d;TKTopAlgo;TKV3d;TKCDF;TKLCAF;TKG3d;TKCAF")
set(TKXCAFSchema_DEPS "TKPLCAF;TKernel;PTKernel;TKMath;TKPShape;TKCDF;TKShapeSchema;TKLCAF;TKPCAF;TKXCAF;TKStdLSchema;TKStdSchema")
set(TKXDEIGES_DEPS "TKBRep;TKernel;TKMath;TKXSBase;TKCDF;TKLCAF;TKG2d;TKXCAF;TKIGES")
set(TKXDESTEP_DEPS "TKBRep;TKSTEPAttr;TKernel;TKMath;TKXSBase;TKG2d;TKCAF;TKSTEPBase;TKCDF;TKLCAF;TKG3d;TKXCAF;TKSTEP")
set(TKSTL_DEPS "TKernel;TKMath;TKBRep;TKG2d;TKG3d;TKMesh;TKTopAlgo")
set(TKVRML_DEPS "TKBRep;TKTopAlgo;TKMath;TKGeomBase;TKernel;TKPrim;TKG2d;TKG3d;TKMesh;TKHLR;TKService;TKGeomAlgo;TKV3d")
set(TKXmlXCAF_DEPS "TKXmlL;TKBRep;TKCDF;TKMath;TKernel;TKG2d;TKGeomBase;TKCAF;TKG3d;TKLCAF;TKXCAF;TKXml")
set(TKBinXCAF_DEPS "TKBRep;TKXCAF;TKMath;TKernel;TKBinL;TKG2d;TKCAF;TKCDF;TKG3d;TKLCAF;TKBin")
set(TKDraw_DEPS "TKernel;TKG2d;TKGeomBase;TKG3d;TKMath;TKBRep;TKGeomAlgo;TKTopAlgo;TKMesh;TKService;TKHLR")
set(TKTopTest_DEPS "TKBRep;TKGeomAlgo;TKTopAlgo;TKernel;TKMath;TKBO;TKG2d;TKG3d;TKDraw;TKHLR;TKGeomBase;TKMesh;TKService;TKV3d;TKFillet;TKPrim;TKBool;TKOffset;TKFeat")
set(TKViewerTest_DEPS "TKGeomBase;TKFillet;TKBRep;TKTopAlgo;TKHLR;TKernel;TKMath;TKNIS;TKService;TKBool;TKPrim;TKGeomAlgo;TKG2d;TKTopTest;TKG3d;TKOffset;TKVoxel;TKMesh;TKV3d;TKDraw;TKOpenGl")
set(TKXSDRAW_DEPS "TKBRep;TKV3d;TKMath;TKNIS;TKernel;TKService;TKXSBase;TKMeshVS;TKG3d;TKViewerTest;TKG2d;TKSTEPBase;TKTopAlgo;TKShHealing;TKGeomBase;TKGeomAlgo;TKMesh;TKDraw;TKSTEP;TKIGES;TKSTL;TKVRML")
set(TKDCAF_DEPS "TKGeomBase;TKBRep;TKGeomAlgo;TKernel;TKMath;TKG2d;TKG3d;TKDraw;TKCDF;TKV3d;TKNIS;TKService;TKLCAF;TKFillet;TKTopAlgo;TKPrim;TKBool;TKBO;TKCAF;TKViewerTest")
set(TKXDEDRAW_DEPS "TKCDF;TKBRep;TKXCAF;TKernel;TKIGES;TKV3d;TKMath;TKNIS;TKService;TKXSBase;TKG2d;TKCAF;TKDraw;TKTopAlgo;TKLCAF;TKG3d;TKSTEPBase;TKSTEP;TKMesh;TKXSDRAW;TKXDEIGES;TKXDESTEP;TKDCAF;TKViewerTest")
set(TKTObjDRAW_DEPS "TKernel;TKCDF;TKLCAF;TKTObj;TKMath;TKDraw;TKDCAF")
set(TKQADraw_DEPS "TKBRep;TKNIS;TKMath;TKernel;TKService;TKG2d;TKDraw;PTKernel;TKV3d;TKGeomBase;TKG3d;TKViewerTest;TKCDF;TKDCAF;TKLCAF;TKFillet;TKTopAlgo;TKHLR;TKBool;TKGeomAlgo;TKPrim;TKBO;TKShHealing;TKOffset;TKFeat;TKCAF;TKIGES;TKXSBase;TKMesh;TKXCAF;TKSTEP;TKXDESTEP;TKXSDRAW;TKSTL;TKAdvTools")
set(DRAWEXE_DEPS "TKDraw;TKMesh;TKTopAlgo;TKHLR;TKGeomAlgo;TKGeomBase;TKG2d;TKBRep;TKMath;TKG3d;TKernel;TKService")


if (BUILD_FoundationClasses)
 LIST(APPEND USED_TOOLKITS TKernel )
 foreach( TK ${TKernel_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKMath )
 foreach( TK ${TKMath_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKAdvTools )
 foreach( TK ${TKAdvTools_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
endif()

if (BUILD_ModelingData)
 LIST(APPEND USED_TOOLKITS TKG2d )
 foreach( TK ${TKG2d_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKG3d )
 foreach( TK ${TKG3d_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKGeomBase )
 foreach( TK ${TKGeomBase_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKBRep )
 foreach( TK ${TKBRep_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
endif()

if (BUILD_ModelingAlgorithms)
 LIST(APPEND USED_TOOLKITS TKGeomAlgo )
 foreach( TK ${TKGeomAlgo_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKTopAlgo )
 foreach( TK ${TKTopAlgo_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKPrim )
 foreach( TK ${TKPrim_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKBO )
 foreach( TK ${TKBO_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKBool )
 foreach( TK ${TKBool_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKHLR )
 foreach( TK ${TKHLR_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKFillet )
 foreach( TK ${TKFillet_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKOffset )
 foreach( TK ${TKOffset_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKFeat )
 foreach( TK ${TKFeat_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKMesh )
 foreach( TK ${TKMesh_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKXMesh )
 foreach( TK ${TKXMesh_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKShHealing )
 foreach( TK ${TKShHealing_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
endif()

if (BUILD_Visualization)
 LIST(APPEND USED_TOOLKITS TKService )
 foreach( TK ${TKService_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKV3d )
 foreach( TK ${TKV3d_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKOpenGl )
 foreach( TK ${TKOpenGl_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKMeshVS )
 foreach( TK ${TKMeshVS_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKNIS )
 foreach( TK ${TKNIS_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKVoxel )
 foreach( TK ${TKVoxel_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
endif()

if (BUILD_ApplicationFramework)
 LIST(APPEND USED_TOOLKITS PTKernel )
 foreach( TK ${PTKernel_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKPShape )
 foreach( TK ${TKPShape_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKCDF )
 foreach( TK ${TKCDF_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKLCAF )
 foreach( TK ${TKLCAF_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKCAF )
 foreach( TK ${TKCAF_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKBinL )
 foreach( TK ${TKBinL_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKXmlL )
 foreach( TK ${TKXmlL_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKShapeSchema )
 foreach( TK ${TKShapeSchema_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKPLCAF )
 foreach( TK ${TKPLCAF_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKBin )
 foreach( TK ${TKBin_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKXml )
 foreach( TK ${TKXml_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKPCAF )
 foreach( TK ${TKPCAF_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS FWOSPlugin )
 foreach( TK ${FWOSPlugin_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKStdLSchema )
 foreach( TK ${TKStdLSchema_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKStdSchema )
 foreach( TK ${TKStdSchema_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKTObj )
 foreach( TK ${TKTObj_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKBinTObj )
 foreach( TK ${TKBinTObj_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKXmlTObj )
 foreach( TK ${TKXmlTObj_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
endif()

if (BUILD_DataExchange)
 LIST(APPEND USED_TOOLKITS TKXSBase )
 foreach( TK ${TKXSBase_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKSTEPBase )
 foreach( TK ${TKSTEPBase_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKSTEPAttr )
 foreach( TK ${TKSTEPAttr_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKSTEP209 )
 foreach( TK ${TKSTEP209_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKSTEP )
 foreach( TK ${TKSTEP_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKIGES )
 foreach( TK ${TKIGES_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKXCAF )
 foreach( TK ${TKXCAF_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKXCAFSchema )
 foreach( TK ${TKXCAFSchema_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKXDEIGES )
 foreach( TK ${TKXDEIGES_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKXDESTEP )
 foreach( TK ${TKXDESTEP_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKSTL )
 foreach( TK ${TKSTL_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKVRML )
 foreach( TK ${TKVRML_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKXmlXCAF )
 foreach( TK ${TKXmlXCAF_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKBinXCAF )
 foreach( TK ${TKBinXCAF_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
endif()

if (BUILD_Draw)
 LIST(APPEND USED_TOOLKITS TKDraw )
 foreach( TK ${TKDraw_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKTopTest )
 foreach( TK ${TKTopTest_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKViewerTest )
 foreach( TK ${TKViewerTest_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKXSDRAW )
 foreach( TK ${TKXSDRAW_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKDCAF )
 foreach( TK ${TKDCAF_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKXDEDRAW )
 foreach( TK ${TKXDEDRAW_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKTObjDRAW )
 foreach( TK ${TKTObjDRAW_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS TKQADraw )
 foreach( TK ${TKQADraw_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
 LIST(APPEND USED_TOOLKITS DRAWEXE )
 foreach( TK ${DRAWEXE_DEPS})
    LIST(APPEND USED_TOOLKITS ${TK} )
 endforeach()
endif()

list( APPEND USED_TOOLKITS ${BUILD_TOOLKITS})

message(STATUS "================${USED_TOOLKITS}")
foreach( TOOLKIT ${USED_TOOLKITS} )
 set(TurnONthe${TOOLKIT} ON)
 foreach( TK ${${TOOLKIT}_DEPS})
   set(TurnONthe${TK} ON)
 endforeach()
endforeach()

subdirs(TKernel)
#subdirs(TKMath)
#subdirs(TKAdvTools)
#subdirs(TKG2d)
#subdirs(TKG3d)
#subdirs(TKGeomBase)
#subdirs(TKBRep)
#subdirs(TKGeomAlgo)
#subdirs(TKTopAlgo)
#subdirs(TKPrim)
#subdirs(TKBO)
#subdirs(TKBool)
#subdirs(TKHLR)
#subdirs(TKFillet)
#subdirs(TKOffset)
#subdirs(TKFeat)
#subdirs(TKMesh)
#subdirs(TKXMesh)
#subdirs(TKShHealing)
#subdirs(TKService)
#subdirs(TKV3d)
#subdirs(TKOpenGl)
#subdirs(TKMeshVS)
#subdirs(TKNIS)
#subdirs(TKVoxel)
#subdirs(PTKernel)
#subdirs(TKPShape)
#subdirs(TKCDF)
#subdirs(TKLCAF)
#subdirs(TKCAF)
#subdirs(TKBinL)
#subdirs(TKXmlL)
#subdirs(TKShapeSchema)
#subdirs(TKPLCAF)
#subdirs(TKBin)
#subdirs(TKXml)
#subdirs(TKPCAF)
#subdirs(FWOSPlugin)
#subdirs(TKStdLSchema)
#subdirs(TKStdSchema)
#subdirs(TKTObj)
#subdirs(TKBinTObj)
#subdirs(TKXmlTObj)
#subdirs(TKXSBase)
#subdirs(TKSTEPBase)
#subdirs(TKSTEPAttr)
#subdirs(TKSTEP209)
#subdirs(TKSTEP)
#subdirs(TKIGES)
#subdirs(TKXCAF)
#subdirs(TKXCAFSchema)
#subdirs(TKXDEIGES)
#subdirs(TKXDESTEP)
#subdirs(TKSTL)
#subdirs(TKVRML)
#subdirs(TKXmlXCAF)
#subdirs(TKBinXCAF)
#subdirs(TKDraw)
#subdirs(TKTopTest)
#subdirs(TKViewerTest)
#subdirs(TKXSDRAW)
#subdirs(TKDCAF)
#subdirs(TKXDEDRAW)
#subdirs(TKTObjDRAW)
#subdirs(TKQADraw)
#subdirs(DRAWEXE)
